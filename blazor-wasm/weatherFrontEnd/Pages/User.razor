@page "/user"

@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using System.Threading.Tasks
@using System.Linq
@using System.Text.Json

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavMan

@if(init)
{
    <div class="parent container d-flex align-items-center justify-content-center h-75">
        <div class="child">
            <span class="spinner-border spinner-border-lg mr-1"></span>
        </div>
    </div>
}
else
{
    <div class="card">
        <h4 class="card-header">User Preferences</h4>
        <div class="card-body">
            <div class="form-group">
                <label>Measurement</label>
                <select class="form-control" @bind="@selectedMeasurement">
                    @foreach (var unit in units){
                        <option value="@unit"> @unit </option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label>Home Page</label>
                <select class="form-control" @bind="@selectedPage">
                    @foreach (var pg in pages){
                        <option value="@pg"> @pg </option>
                    }
                </select>
            </div>
            <button disabled="@loading" class="@btnclass" @onclick="@Save">
                @if(loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Save
            </button>    
        </div>
    </div>
    <div class="card">
        <h4 class="card-header">Change Password</h4>
        <div class="card-body">
            <EditForm Model="@model" OnValidSubmit="@Post">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Verify Password</label>
                    <InputText @bind-Value="model.old_password" type="password" class="form-control" />
                    <ValidationMessage For="@(() => model.old_password)" />
                </div>
                <div class="form-group">
                    <label>New Password</label>
                    <InputText @bind-Value="model.new_password" type="password" class="form-control" />
                    <ValidationMessage For="@(() => model.new_password)" />
                </div>
                <button disabled="@loading" class="@change">
                    @if (load) 
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Submit
                </button>
            </EditForm>
        </div>
    </div>
    <div class="container width:100%">
        <div class="row p-4">
            <div class="text-left">
                <button class="@logoff" @onclick="@logoutAll">
                    Logout Everywhere
                </button>
            </div>
        </div>
        <div class="row p-4">
            <button class="@del" @onclick="@killUser">
                Delete Account
            </button>
        </div>
    </div>
}

@code {
    protected override async Task OnParametersSetAsync(){
        await refreshUserData();
    }
    private bool init, loading, load;
    private int saved = 0;
    private string btnclass => (saved == 1) ? "btn btn-success" : (saved == -1) ? "btn btn-danger" : "btn btn-primary";
    private string token, change = "btn btn-primary", logoff = "btn btn-warning btn-lg", del = "btn btn-danger btn-lg btn-block";
    private Models.UserResponse user = new Models.UserResponse();
    private Models.Pref pref = new Models.Pref();
    private Models.Passwd model = new Models.Passwd();
    private string selectedMeasurement{
        get => (pref.measurement == null) ? user.measurement : pref.measurement;
        set { pref.measurement = value; }
    }
    List<string> units = new List<string>() { "SI", "US", "Default" };
    private string selectedPage{
        get => (pref.defaultPage == null) ? user.defaultPage : pref.defaultPage;
        set { pref.defaultPage = value; }
    }
    List<string> pages = new List<string>() { "Hourly", "Daily", "Account", "Default" };
    private async Task refreshUserData(){
        init = true;
        string cookie = await JSRuntime.InvokeAsync<string>("blazorExtensions.AuthGet",
            "Authorization");
        if(cookie == null || cookie.Length < 7){
            // User not authenticated case
            NavMan.NavigateTo("/login");
        }else{
            // User authenticated case
            token = cookie.Substring(cookie.IndexOf(" ") + 1);
            var userRequest = new HttpRequestMessage(HttpMethod.Get, "user");
            userRequest.Headers.Authorization = new AuthenticationHeaderValue(
                "Token", token);
            using var userResponse = await Http.SendAsync(userRequest);
            user = await userResponse.Content.ReadFromJsonAsync<Models.UserResponse>();
            init = false;
        }
    }
    private async Task Save(){
        loading = true;
        if(pref.measurement == null)
            pref.measurement = user.measurement;
        if(pref.defaultPage == null)
            pref.defaultPage = user.defaultPage;
        if(pref.measurement != user.measurement || pref.defaultPage != user.defaultPage){
            var saveRequest = new HttpRequestMessage(HttpMethod.Put, "preferences");
            saveRequest.Headers.Authorization = new AuthenticationHeaderValue("Token", token);
            saveRequest.Content = new StringContent(JsonSerializer.Serialize(pref), null, "application/json");
            using var saveResponse = await Http.SendAsync(saveRequest);
            if(saveResponse.IsSuccessStatusCode){
                saved = 1;
                await refreshUserData();
            }else{
                saved = -1;
            }
        }else
            saved = 0;
        loading = false;
    }
    private async Task Post(){
        load = true;
        var cond = (model.old_password != null && model.old_password != "") && (model.new_password != null && model.new_password != "");
        if(cond && model.old_password != model.new_password){
            var passwdRequest = new HttpRequestMessage(HttpMethod.Put, "password");
            passwdRequest.Headers.Authorization = new AuthenticationHeaderValue("Token", token);
            passwdRequest.Content = new StringContent(JsonSerializer.Serialize(model), null, "application/json");
            using var passwdResponse = await Http.SendAsync(passwdRequest);
            if(passwdResponse.IsSuccessStatusCode){
                var reload = new HttpRequestMessage(HttpMethod.Post, "logoutall");
                reload.Headers.Authorization = new AuthenticationHeaderValue("Token", token);
                using var reloadResponse = await Http.SendAsync(reload);
                if(reloadResponse.IsSuccessStatusCode){
                    await JSRuntime.InvokeAsync<string>("blazorExtensions.AuthDelete", "Authorization");
                    NavMan.NavigateTo("/login", forceLoad: true);
                }else
                    change = "btn btn-danger";
            }
        }
        load = false;
    }
    private async Task logoutAll(){
        var lga = new HttpRequestMessage(HttpMethod.Post, "logoutall");
        lga.Headers.Authorization = new AuthenticationHeaderValue("Token", token);
        using var lgaRes = await Http.SendAsync(lga);
        if(lgaRes.IsSuccessStatusCode){
            await JSRuntime.InvokeAsync<string>("blazorExtensions.AuthDelete", "Authorization");
            NavMan.NavigateTo("/login", forceLoad: true);
        }else
            logoff = "btn btn-outline-warning btn-lg disabled";
    }
    private async Task killUser(){
        var kill = new HttpRequestMessage(HttpMethod.Delete, "user");
        kill.Headers.Authorization = new AuthenticationHeaderValue("Token", token);
        using var killRes = await Http.SendAsync(kill);
        if(killRes.IsSuccessStatusCode){
            await JSRuntime.InvokeAsync<string>("blazorExtensions.AuthDelete", "Authorization");
            NavMan.NavigateTo("/register", forceLoad: true);
        }else
            del = "btn btn-outline-danger btn-lg btn-block disabled";
    }
}
