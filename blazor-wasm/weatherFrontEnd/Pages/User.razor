@page "/user"

@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using System.Threading.Tasks
@using System.Linq
@using System.Text.Json

@inject HttpClient Http
@inject Microsoft.Extensions.Configuration.IConfiguration config
@inject IJSRuntime JSRuntime
@inject NavigationManager NavMan

@if(init)
{
    <div class="text-center">
        <span class="spinner-border spinner-border-lg mr-1"></span>
    </div>
}
else
{
    <div class="card">
        <h4 class="card-header">User Preferences</h4>
        <div class="card-body">
            <div class="form-group">
                <label>Measurement</label>
                <select class="form-control" @bind="@selectedMeasurement">
                    @foreach (var unit in units){
                        @if(@unit == "")
                        {
                            <option value="@unit"> Default </option>
                        }
                        else{
                            <option value="@unit"> @unit </option>
                        }
                    }
                </select>
            </div>
            <div class="form-group">
                <label>Home Page</label>
                <select class="form-control" @bind="@selectedPage">
                    @foreach (var pg in pages){
                        @if(@pg == "")
                        {
                            <option value="@pg"> Default </option>
                        }
                        else{
                            <option value="@pg"> @pg </option>
                        }
                    }
                </select>
            </div>
            <button disabled="@loading" class="btn btn-primary" @onclick="Save">
                @if(loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Save
            </button>    
        </div>
    </div>
    @if (saved){
        <p>SAVED!</p>
    }
    @* <div class="card">
        <h4 class="card-header">Change Password</h4>
        <div class="card-body">
            <EditForm Model="@model" OnValidSubmit="Post">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Username</label>
                    <InputText @bind-Value="model.username" class="form-control" />
                    <ValidationMessage For="@(() => model.username)" />
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText @bind-Value="model.password" type="password" class="form-control" />
                    <ValidationMessage For="@(() => model.password)" />
                </div>
                <button disabled="@loading" class="btn btn-primary">
                    @if (loading) 
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Login
                </button>
            </EditForm>
            @if (error){
                <p>ERROR!</p>
            }
        </div>
    </div> *@
}

@code {
    protected override async Task OnInitializedAsync(){
        await refreshUserData();
    }
    private bool init;
    private bool loading;
    private bool saved = false;
    private string token;
    private Models.UserResponse user = new Models.UserResponse();
    private Models.Pref pref = new Models.Pref();
    
    private string selectedMeasurement{
        get => (pref.measurement == null) ? user.measurement : pref.measurement;
        set { pref.measurement = value; }
    }
    List<string> units = new List<string>() { "SI", "US", "" };
    
    private string selectedPage{
        get => (pref.defaultPage == null) ? user.defaultPage : pref.defaultPage;
        set { pref.defaultPage = value; }
    }
    List<string> pages = new List<string>() { "Hourly", "Daily", "Account", "" };

    private async Task refreshUserData(){
        init = true;
        string cookie = await JSRuntime.InvokeAsync<string>("blazorExtensions.ReadCookie",
            "Authorization");
        if(cookie == null || cookie == ""){
            // User not authenticated case
            NavMan.NavigateTo("/login");
        }else{
            // User authenticated case
            token = cookie.Substring(cookie.IndexOf(" ") + 1);
            var userRequest = new HttpRequestMessage(HttpMethod.Get,
                config["API_URL"] + "user");
            userRequest.Headers.Authorization = new AuthenticationHeaderValue(
                "Token", token);
            using var userResponse = await Http.SendAsync(userRequest);
            user = await userResponse.Content.ReadFromJsonAsync<Models.UserResponse>();
            init = false;
        }
    }

    private async Task Save(){
        loading = true;
        if(pref.measurement == null)
            pref.measurement = user.measurement;
        if(pref.defaultPage == null)
            pref.defaultPage = user.measurement;
        if(pref.measurement != user.measurement || pref.defaultPage != user.defaultPage){
            var saveRequest = new HttpRequestMessage(HttpMethod.Put, config["API_URL"] + "preferences");
            saveRequest.Headers.Authorization = new AuthenticationHeaderValue("Token", token);
            saveRequest.Content = new StringContent(JsonSerializer.Serialize(pref), null, "application/json");
            using var saveResponse = await Http.SendAsync(saveRequest);
            loading = false;
            if(saveResponse.IsSuccessStatusCode){
                saved = true;
                await refreshUserData();
            }
        }
        loading = false;
    }
}
