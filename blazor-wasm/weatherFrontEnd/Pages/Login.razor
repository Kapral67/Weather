@page "/login"

@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using System.Threading.Tasks
@using System.Linq
@using System.Text.Json

@inject HttpClient Http
@inject Microsoft.Extensions.Configuration.IConfiguration config
@inject IJSRuntime JSRuntime
@inject NavigationManager NavMan

<div class="card">
    <h4 class="card-header">Login</h4>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="Post">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="model.username" class="form-control" />
                <ValidationMessage For="@(() => model.username)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="model.password" type="password" class="form-control" />
                <ValidationMessage For="@(() => model.password)" />
            </div>
            <button disabled="@loading" class="btn btn-primary">
                @if (loading) 
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Login
            </button>
        </EditForm>
        @if (error){
            <p>ERROR!</p>
        }
    </div>
</div>

@code {
    private Models.Log model = new Models.Log();
    private Models.UserResponse user = new Models.UserResponse();
    private Models.AuthResponse auth = new Models.AuthResponse();
    private bool loading;

    private bool error = false;

    private async Task Post(){
        loading = true;
        if(model.username != null && model.password != null){
            var authRequest = new HttpRequestMessage(HttpMethod.Post, config["API_URL"] + "login");
            authRequest.Content = new StringContent(JsonSerializer.Serialize(model), null,
                "application/json");
            using var authResponse = await Http.SendAsync(authRequest);
            auth = await authResponse.Content.ReadFromJsonAsync<Models.AuthResponse>();
            string token = "Token " + auth.token;
            await JSRuntime.InvokeAsync<string>("blazorExtensions.AuthSet", "Authorization",
                token, auth.expiry);
            var userRequest = new HttpRequestMessage(HttpMethod.Get, config["API_URL"] + "user");
            userRequest.Headers.Authorization = new AuthenticationHeaderValue("Token", auth.token);
            using var userResponse = await Http.SendAsync(userRequest);
            @* user = await userResponse.Content.ReadFromJsonAsync<Models.UserResponse>(); *@
            if(userResponse.IsSuccessStatusCode)
                NavMan.NavigateTo("/");
            else{
                error = true;
                loading = false;
            }
        }
    }
}
