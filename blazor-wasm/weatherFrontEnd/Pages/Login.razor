@page "/login"

@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using System.Threading.Tasks
@using System.Linq
@using System.Text.Json

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavMan

@if(init){
    <div class="parent container d-flex align-items-center justify-content-center h-75">
        <div class="child">
            <span class="spinner-border spinner-border-lg mr-1"></span>
        </div>
    </div>
}else{
    <div class="card">
        <h4 class="card-header">Login</h4>
        <div class="card-body">
            <EditForm Model="@model" OnValidSubmit="@Post">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Email</label>
                    <InputText id="email" name="email" placeholder="Email" @bind-Value="model.username" type="text" class="form-control" />
                    <ValidationMessage For="@(() => model.username)" />
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText id="password" name="password" placeholder="Password" @bind-Value="model.password" type="password" class="form-control" />
                    <ValidationMessage For="@(() => model.password)" />
                </div>
                <button disabled="@loading" class="@btnclass">
                    @if(loading){
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Login
                </button>
            </EditForm>
            @if(err != null){
                @foreach(var i in err){
                    @foreach(var y in @i.Value){
                        <div class="container">
                            <div class="row p-4">
                                <div class="alert alert-danger">
                                    <strong>Error!</strong> @y
                                </div>
                            </div>
                        </div>
                    }
                }
            }
        </div>
    </div>
}

@code {
    private Models.Log model = new Models.Log();
    private Models.AuthResponse auth = new Models.AuthResponse();
    private bool loading, init, error = false;
    private Dictionary<string, List<string>> err = null;
    private string btnclass => (error) ? "btn btn-danger" : "btn btn-primary";
    private async Task checkLoggedOut(){
        string cookie = await JSRuntime.InvokeAsync<string>("blazorExtensions.AuthGet", "Authorization");
        if(cookie != null){
            await JSRuntime.InvokeVoidAsync("blazorExtensions.AuthDelete", "Authorization");
            NavMan.NavigateTo("/login", true);
        }
    }
    protected override async Task OnParametersSetAsync(){
        init = true;
        await checkLoggedOut();
        init = false;
    }
    private async Task Post(){
        loading = true;
        var authRequest = new HttpRequestMessage(HttpMethod.Post, "login");
        authRequest.Content = new StringContent(JsonSerializer.Serialize(model), null,
            "application/json");
        using var authResponse = await Http.SendAsync(authRequest);
        if(authResponse.IsSuccessStatusCode){
            auth = await authResponse.Content.ReadFromJsonAsync<Models.AuthResponse>();
            string token = "Token " + auth.token;
            await JSRuntime.InvokeAsync<string>("blazorExtensions.AuthSet", "Authorization",
                token, auth.expiry);
            var userRequest = new HttpRequestMessage(HttpMethod.Get, "user");
            userRequest.Headers.Authorization = new AuthenticationHeaderValue("Token", auth.token);
            using var userResponse = await Http.SendAsync(userRequest);
            if(userResponse.IsSuccessStatusCode)
                NavMan.NavigateTo("/");
            else{
                Dictionary<string, List<string>> tmpDict = new Dictionary<string, List<string>>();
                List<string> tmpList = new List<string>();
                tmpList.Add("I'm a teapot.");
                tmpDict.Add("Error", tmpList);
                err = tmpDict;
            }
        }else{
            error = true;
            err = await authResponse.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
        }
        loading = false;
    }
}
