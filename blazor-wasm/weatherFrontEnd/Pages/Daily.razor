@page "/daily"

@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using System.Threading.Tasks
@using System.Linq
@using System.Text.Json
@using System.Text.RegularExpressions

@inject HttpClient Http
@inject IJSRuntime JSRuntime

@if(loading){
    <div class="parent container d-flex align-items-center justify-content-center h-100">
        <div class="child">
            <span class="spinner-border spinner-border-lg mr-1"></span>
        </div>
    </div>
}
else{
    @if(forecast_data != null){
        <h1>@City, @State</h1>
        @if(US){
            <h2>Elevation: @forecast_data.elevation.feet'</h2>
        }else{
            <h2>Elevation: @forecast_data.elevation.meters m</h2>
        }
    }
    @if(alerts != null){
        @foreach(var str in alerts){
            <div class="alert alert-@getColor(str[2]) alert-dismissible fade show d-flex align-items-center" role="alert">
                <div class="container">
                    <div class="row p-1">
                        @if(str[2] == "Minor"){
                            <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Info:"><use xlink:href="#info-fill"/></svg>
                        }else if(str[2] == "Moderate"){
                            <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Warning:"><use xlink:href="#exclamation-triangle-fill"/></svg>
                        }else if(str[2] == "Severe" || str[2] == "Extreme"){
                            <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Danger:"><use xlink:href="#exclamation-triangle-fill"/></svg>
                        }else{
                            <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Unknown:"><use xlink:href="#info-fill"/></svg>
                        }
                        <strong>&emsp;@str[0]</strong>
                    </div>
                    @if(str[1] != ""){
                        <div class="row p-2">
                            <p>@((MarkupString)ResolveLinks(toHtml(str[1])))</p>
                        </div>
                    }
                </div>
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        }
    }
    @if(forecast_data != null){
        <div class="text-right">
            @if(@age > 1){
                <sub>Last Updated: @age hours ago.</sub>
            }
            else if(@age == 1){
                <sub>Last Updated: 1 hour ago.</sub>
            }
            else{
                <sub>Last Updated: less than an hour ago.</sub>
            }
        </div>
        @foreach (var loc in forecast_data.periods){
            @if(loc.endTime > DateTime.UtcNow){
                @if(loc.isDaytime){
                    <div class="card">
                        <h3 class="card-header">@loc.name</h3>
                        <div class="card-body">
                            <div class="container">
                                <div class="row">
                                    <div class="col">
                                        @if(US){
                                            <h5>@loc.temperature째F</h5>
                                            <h5>@loc.windSpeed&nbsp;@loc.windDirection</h5>
                                        }else{
                                            <h5>@loc.temperatureC째C</h5>
                                            <h5>@wU(loc.windSpeed)&nbsp;@loc.windDirection</h5>
                                        }
                                    </div>
                                    <div class="col">
                                        <p>@loc.detailedForecast</p>
                                    </div>
                                    <div class="col">
                                        <div class="text-right">
                                            <figure>
                                                <img src=@loc.iconLg />
                                                <figcaption>@loc.shortForecast</figcaption>
                                            </figure>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }else{
                    <div class="card bg-dark text-white">
                        <h3 class="card-header">@loc.name</h3>
                        <div class="card-body">
                            <div class="container">
                                <div class="row">
                                    <div class="col">
                                        @if(US){
                                            <h5>@loc.temperature째F</h5>
                                            <h5>@loc.windSpeed&nbsp;@loc.windDirection</h5>
                                        }else{
                                            <h5>@loc.temperatureC째C</h5>
                                            <h5>@wU(loc.windSpeed)&nbsp;@loc.windDirection</h5>
                                        }
                                    </div>
                                    <div class="col">
                                        <p>@loc.detailedForecast</p>
                                    </div>
                                    <div class="col">
                                        <div class="text-right">
                                            <figure>
                                                <img src=@loc.iconLg/>
                                                <figcaption>@loc.shortForecast</figcaption>
                                            </figure>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        }
    }
    @if(error){
        @if(!my_problem){
            <div class="parent container d-flex align-items-center justify-content-center h-100">
                <div class="child">
                    <div class="alert alert-warning d-flex align-items-center" role="alert">
                        <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Warning:"><use xlink:href="#exclamation-triangle-fill"/></svg>
                        <div>
                            <strong>&emsp;National Weather Service Endpoint Failure!</strong>
                        </div>
                    </div>
                </div>
            </div>
        }else{
            <div class="parent container d-flex align-items-center justify-content-center h-100">
                <div class="child">
                    <div class="alert alert-danger d-flex align-items-center" role="alert">
                        <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Danger:"><use xlink:href="#exclamation-triangle-fill"/></svg>
                        <div>
                            <strong>&emsp;Whether Server Failure!</strong>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
}

@code {
    public string getColor(string severity){
        switch(severity){
            case "Extreme" :
                return "danger";
            case "Severe" :
                return "danger";
            case "Moderate" :
                return "warning";
            case "Minor" :
                return "primary";
            default :
                return "secondary";
        }
    }
    public string wU(string ws){
        string tmp = ws.Substring(0, ws.IndexOf(" mph"));
        int sp;
        if((sp = tmp.IndexOf("to")) > 0){
            string first = tmp.Substring(0, sp);
            string second = tmp.Substring(sp+2);
            int one = Int32.Parse(first);
            int two = Int32.Parse(second);
            one = (int)Math.Round((((double)one)*1.609344), MidpointRounding.ToEven);
            two = (int)Math.Round((((double)two)*1.609344), MidpointRounding.ToEven);
            return one.ToString() + " to " + two.ToString() + " kph";
        }else{
            int k = Int32.Parse(tmp);
            k = (int)Math.Round((((double)k)*1.609344), MidpointRounding.ToEven);
            return k.ToString() + " kph";
        }
    }
    public class Locations{
        public string City { get; set; }
        public string State { get; set; }
        public float Latitude { get; set; }
        public float Longitude { get; set; }
    }
    protected override async Task OnParametersSetAsync(){
        loading = true;
        await Post();
        loading = false;
    }
    private Metadata forecast_data = null;
    private List<List<string>> alerts = null;
    private string City, State;
    private bool US, loading, my_problem = true, error = false;
    private TimeSpan tspan => (DateTimeOffset.UtcNow - forecast_data.updated);
    private int age => (int)Math.Round(tspan.TotalHours,0,MidpointRounding.AwayFromZero);
    private Models.UserResponse user = new Models.UserResponse();
    private async Task Post(){
        string tmp_City = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem",
            "City");
        string tmp_State = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem",
            "State");
        string tmp_Unit = null;
        string cookie = await JSRuntime.InvokeAsync<string>("blazorExtensions.AuthGet",
            "Authorization");
        if(cookie != null){
            int i = cookie.IndexOf(" ") + 1;
            if(i > 0){
                string token = cookie.Substring(i);
                var userRequest = new HttpRequestMessage(HttpMethod.Get, "user");
                userRequest.Headers.Authorization = new AuthenticationHeaderValue("Token", token);
                using var userResponse = await Http.SendAsync(userRequest);
                if(userResponse.IsSuccessStatusCode){
                    user = await userResponse.Content.ReadFromJsonAsync<Models.UserResponse>();
                    if(user.measurement == "SI")
                        tmp_Unit = "SI";
                    else
                        tmp_Unit = "US";
                }else
                    await JSRuntime.InvokeVoidAsync("blazorExtensions.AuthDelete", "Authorization");
            }
        }
        var locObj = new Locations(){
            City = (tmp_City == null) ? "San Francisco" : tmp_City,
            State = (tmp_State == null) ? "CA" : tmp_State,
            Latitude = 0.0F,
            Longitude = 0.0F
        };
        US = (tmp_Unit == "US" || tmp_Unit == null);
        City = locObj.City;
        State = locObj.State;
        var request = new HttpRequestMessage(HttpMethod.Post, "daily");
        request.Content = new StringContent(JsonSerializer.Serialize(locObj), null,
            "application/json");
        using var response = await Http.SendAsync(request);
        if(response.IsSuccessStatusCode)
            forecast_data = await response.Content.ReadFromJsonAsync<Metadata>();
        else{
            error = true;
            if(((Int32)response.StatusCode) == 502)
                my_problem = false;
        }
        var alertRequest = new HttpRequestMessage(HttpMethod.Post, "alert");
        alertRequest.Content = new StringContent(JsonSerializer.Serialize(locObj), null,
            "application/json");
        using var alertResponse = await Http.SendAsync(alertRequest);
        Int32 alertStatus = (Int32)alertResponse.StatusCode;
        if(alertResponse.IsSuccessStatusCode && alertStatus != 204){
            alerts = await alertResponse.Content.ReadFromJsonAsync<List<List<string>>>();
        }
    }
    public class Period{
        public int number { get; set; }
        public string name { get; set; }
        public DateTimeOffset startTime { get; set; }
        public DateTimeOffset endTime { get; set; }
        public bool isDaytime { get; set; }
        public int temperature { get; set; }
        public int temperatureC => (int)Math.Round(
            ((double)((temperature - 32)*0.5556)),0,MidpointRounding.ToEven);
        public char temperatureUnit { get; set; }
        public string temperatureTrend { get; set; }
        public string windSpeed { get; set; }
        public string windDirection { get; set; }
        public string icon { get; set; }
        public string iconBase => (icon.IndexOf("?") > 0) ? icon.Substring(0,
            icon.IndexOf("?")) : icon;
        public string iconLg => iconBase + "?size=large";
        public string shortForecast { get; set; }
        public string detailedForecast { get; set; }
    }
    public class Elevation{
        public string unitCode { get; set; }
        public double value { get; set; }
        public float meters => (float)Math.Round(value,2,MidpointRounding.ToEven);
        public float feet => (float)Math.Round((value * 3.2808398950131),2,
            MidpointRounding.ToEven);
    }
    public class Metadata{
        public DateTimeOffset updated { get; set; }
        public string units { get; set; }
        public string forecastGenerator { get; set; }
        public DateTimeOffset generatedAt { get; set; }
        public DateTimeOffset updateTime { get; set; }
        public string validTimes { get; set; }
        public Elevation elevation { get; set; }
        public IEnumerable<Period> periods { get; set; }
    }
    private static readonly Regex regex = new Regex("((https://|http://|www\\.)([A-Z0-9.-:]{1,})\\.[0-9A-Z?;~&#=\\-_\\./]{2,})", RegexOptions.Compiled | RegexOptions.IgnoreCase);
    private static readonly string link = "<a href=\"{0}{1}\">{2}</a>";
    public static string ResolveLinks(string body){
        if(string.IsNullOrEmpty(body))
            return body; 
        foreach(Match match in regex.Matches(body)){
            if (!match.Value.Contains("://"))
                body = body.Replace(match.Value, string.Format(link, "http://", match.Value, ShortenUrl(match.Value, 50)));
            else
                body = body.Replace(match.Value, string.Format(link, string.Empty, match.Value, ShortenUrl(match.Value, 50)));
        }
        return body;
    }
    private static string ShortenUrl(string url, int max){
        if(url.Length <= max)
            return url;
        int startIndex = url.IndexOf("://");
        if(startIndex > -1)
            url = url.Substring(startIndex + 3);
        if(url.Length <= max)
            return url;
        int firstIndex = url.IndexOf("/") + 1;
        int lastIndex = url.LastIndexOf("/");
        if(firstIndex < lastIndex)
            url = url.Replace(url.Substring(firstIndex, lastIndex - firstIndex), "...");
        if(url.Length <= max)
            return url;
        int queryIndex = url.IndexOf("?");
        if(queryIndex > -1)
            url = url.Substring(0, queryIndex);
        if(url.Length <= max)
            return url;
        int fragmentIndex = url.IndexOf("#");
        if(fragmentIndex > -1)
            url = url.Substring(0, fragmentIndex);
        if(url.Length <= max)
            return url;
        firstIndex = url.LastIndexOf("/") + 1;
        lastIndex = url.LastIndexOf(".");
        if(lastIndex - firstIndex > 10){
            string page = url.Substring(firstIndex, lastIndex - firstIndex);
            int length = url.Length - max + 3;
            url = url.Replace(page, "..." + page.Substring(length));
        }
        return url;
    }
    private static string toHtml(string content){
        content = content.Replace("\n\n", "<br /><br />");
        return content;
    }
}
