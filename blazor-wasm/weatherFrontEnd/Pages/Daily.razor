@page "/daily"

@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using System.Threading.Tasks
@using System.Linq
@using System.Text.Json

@inject HttpClient Http
@inject IJSRuntime JSRuntime

@if (locs == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @* <table class="table">
        <thead>
            <tr>
                <th>City</th>
                <th>State</th>
                <th>Latitude</th>
                <th>Longitude</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var loc in locs)
            {
                <tr>
                    <td>@loc.City</td>
                    <td>@loc.State</td>
                    <td>@loc.Latitude</td>
                    <td>@loc.Longitude</td>
                </tr>
            }
        </tbody>
    </table> *@
    @if (forecast_data != null){
        <h1>@City, @State</h1>
        @if(US){
            <h2>Elevation: @forecast_data.elevation.feet'</h2>
        }else{
            <h2>Elevation: @forecast_data.elevation.meters m</h2>
        }
        <div class="text-right">
            @if(@age > 1){
                <sub>Last Updated: @age hours ago.</sub>
            }
            else if(@age == 1){
                <sub>Last Updated: 1 hour ago.</sub>
            }
            else{
                <sub>Last Updated: less than an hour ago.</sub>
            }
        </div>
        @foreach (var loc in forecast_data.periods){
            @if(loc.endTime > DateTime.UtcNow){
                @if(loc.isDaytime){
                    <div class="card">
                        <h3 class="card-header">@loc.name</h3>
                        <div class="card-body">
                            <div class="container">
                                <div class="row">
                                    <div class="col">
                                        @if(US){
                                            <h5>@loc.temperature째F</h5>
                                            <h5>@loc.windSpeed&nbsp;@loc.windDirection</h5>
                                        }else{
                                            <h5>@loc.temperatureC째C</h5>
                                            <h5>@wU(loc.windSpeed)&nbsp;@loc.windDirection</h5>
                                        }
                                    </div>
                                    <div class="col">
                                        <p>@loc.detailedForecast</p>
                                    </div>
                                    <div class="col">
                                        <div class="text-right">
                                            <figure>
                                                <img src=@loc.iconLg />
                                                <figcaption>@loc.shortForecast</figcaption>
                                            </figure>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }else{
                    <div class="card bg-dark text-white">
                        <h3 class="card-header">@loc.name</h3>
                        <div class="card-body">
                            <div class="container">
                                <div class="row">
                                    <div class="col">
                                        @if(US){
                                            <h5>@loc.temperature째F</h5>
                                            <h5>@loc.windSpeed&nbsp;@loc.windDirection</h5>
                                        }else{
                                            <h5>@loc.temperatureC째C</h5>
                                            <h5>@wU(loc.windSpeed)&nbsp;@loc.windDirection</h5>
                                        }
                                    </div>
                                    <div class="col">
                                        <p>@loc.detailedForecast</p>
                                    </div>
                                    <div class="col">
                                        <div class="text-right">
                                            <figure>
                                                <img src=@loc.iconLg/>
                                                <figcaption>@loc.shortForecast</figcaption>
                                            </figure>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        }
        @* <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Degrees Fahrenheit</th>
                    <th>Degrees Celsius</th>
                    <th>Wind Speed</th>
                    <th>Wind Direction</th>
                    <th>Short Forecast</th>
                    <th>Icon</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var loc in forecast_data.periods)
                {
                    <tr>
                        <td>@loc.name</td>
                        <td>@loc.temperature</td>
                        <td>@loc.temperatureC</td>
                        <td>@loc.windSpeed</td>
                        <td>@loc.windDirection</td>
                        <td>@loc.shortForecast</td>
                        <td>
                            <figure>
                                <img src=@loc.iconBase/>
                                <figcaption>@loc.detailedForecast</figcaption>
                            </figure>
                        </td>
                    </tr>
                }
            </tbody>
        </table> *@
    }
}

@code {
    public string wU(string ws){
        string tmp = ws.Substring(0, ws.IndexOf(" mph"));
        int sp;
        if((sp = tmp.IndexOf("to")) > 0){
            string first = tmp.Substring(0, sp);
            string second = tmp.Substring(sp+2);
            int one = Int32.Parse(first);
            int two = Int32.Parse(second);
            one = (int)Math.Round((((double)one)*1.609344), MidpointRounding.ToEven);
            two = (int)Math.Round((((double)two)*1.609344), MidpointRounding.ToEven);
            return one.ToString() + " to " + two.ToString() + " kph";
        }else{
            int k = Int32.Parse(tmp);
            k = (int)Math.Round((((double)k)*1.609344), MidpointRounding.ToEven);
            return k.ToString() + " kph";
        }
    }
    public class Locations{
        public string City { get; set; }
        public string State { get; set; }
        public float Latitude { get; set; }
        public float Longitude { get; set; }
    }
    private IEnumerable<Locations> locs = Array.Empty<Locations>();
    protected override async Task OnParametersSetAsync(){
        @* await refreshList(); *@
        await Post();
    }

    @* private async Task refreshList(){
        locs = await Http.GetFromJsonAsync<IEnumerable<Locations>>("daily");
    } *@

    private Metadata forecast_data;
    private string City;
    private string State;
    private bool US;

    private TimeSpan tspan => (DateTimeOffset.UtcNow - forecast_data.updated);
    private int age => (int)Math.Round(tspan.TotalHours,0,MidpointRounding.AwayFromZero);

    private Models.UserResponse user = new Models.UserResponse();
    private async Task Post(){
        string tmp_City = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem",
            "City");
        string tmp_State = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem",
            "State");
        string tmp_Unit = null;
        string cookie = await JSRuntime.InvokeAsync<string>("blazorExtensions.AuthGet",
            "Authorization");
        if(cookie != null){
            int i = cookie.IndexOf(" ") + 1;
            if(i > 0){
                string token = cookie.Substring(i);
                var userRequest = new HttpRequestMessage(HttpMethod.Get, "user");
                userRequest.Headers.Authorization = new AuthenticationHeaderValue("Token", token);
                using var userResponse = await Http.SendAsync(userRequest);
                user = await userResponse.Content.ReadFromJsonAsync<Models.UserResponse>();
                if(user.measurement == "SI")
                    tmp_Unit = "SI";
                else
                    tmp_Unit = "US";
            }
        }
        var locObj = new Locations(){
            City = (tmp_City == null) ? "San Francisco" : tmp_City,
            State = (tmp_State == null) ? "CA" : tmp_State,
            Latitude = 0.0F,
            Longitude = 0.0F
        };
        US = (tmp_Unit == "US" || tmp_Unit == null);
        City = locObj.City;
        State = locObj.State;
        var request = new HttpRequestMessage(HttpMethod.Post, "daily");
        request.Content = new StringContent(JsonSerializer.Serialize(locObj), null,
            "application/json");
        using var response = await Http.SendAsync(request);
        forecast_data = await response.Content.ReadFromJsonAsync<Metadata>();
        @* Console.WriteLine(test.updated); *@
        @* await refreshList(); *@
    }

    public class Period{
        public int number { get; set; }
        public string name { get; set; }
        public DateTimeOffset startTime { get; set; }
        public DateTimeOffset endTime { get; set; }
        public bool isDaytime { get; set; }
        public int temperature { get; set; }
        public int temperatureC => (int)Math.Round(
            ((double)((temperature - 32)*0.5556)),0,MidpointRounding.ToEven);
        public char temperatureUnit { get; set; }
        public string temperatureTrend { get; set; }
        public string windSpeed { get; set; }
        public string windDirection { get; set; }
        public string icon { get; set; }
        public string iconBase => (icon.IndexOf("?") > 0) ? icon.Substring(0,
            icon.IndexOf("?")) : icon;
        public string iconLg => iconBase + "?size=large";
        public string shortForecast { get; set; }
        public string detailedForecast { get; set; }
    }

    public class Elevation{
        public string unitCode { get; set; }
        public double value { get; set; }
        public float meters => (float)Math.Round(value,2,MidpointRounding.ToEven);
        public float feet => (float)Math.Round((value * 3.2808398950131),2,
            MidpointRounding.ToEven);
    }

    public class Metadata{
        public DateTimeOffset updated { get; set; }
        public string units { get; set; }
        public string forecastGenerator { get; set; }
        public DateTimeOffset generatedAt { get; set; }
        public DateTimeOffset updateTime { get; set; }
        public string validTimes { get; set; }
        public Elevation elevation { get; set; }
        public IEnumerable<Period> periods { get; set; }
    }
}
