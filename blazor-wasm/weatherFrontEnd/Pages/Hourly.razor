@page "/hourly"

@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using System.Threading.Tasks
@using System.Linq
@using System.Text.Json

@inject HttpClient Http
@inject IJSRuntime JSRuntime

@if (loading)
{
    <div class="parent container d-flex align-items-center justify-content-center h-75">
        <div class="child">
            <span class="spinner-border spinner-border-lg mr-1"></span>
        </div>
    </div>
}
else
{
    @if (forecast_data != null){
        <h1>@forecast_data.city, @forecast_data.state</h1>
        @if(US){
            <h2>Elevation: @forecast_data.weather.elevation.feet'</h2>
        }else{
            <h2>Elevation: @forecast_data.weather.elevation.meters m</h2>
        }
        <sub style="text-align: left; width:49%; display: inline-block;">
            @forecast_data.weather.tz
        </sub>
        @if(@age > 1){
            <sub style="text-align: right; width:50%; display: inline-block;">
                Last Updated: @age hours ago.
            </sub>
        }
        else if(@age == 1){
            <sub style="text-align: right; width:50%; display: inline-block;">
                Last Updated: 1 hour ago.
            </sub>
        }
        else{
            <sub style="text-align: right; width:50%; display: inline-block;">
                Last Updated: &lt; 1 hour ago.
            </sub>
        }
        @foreach (var loc in forecast_data.weather.periods){
            @if((DateTime.UtcNow - loc.startTime) < TimeSpan.FromHours(1)){
                @if(loc.isDaytime){
                    <div class="card">
                        <div class="card-header">
                            <div class="container">
                                <div class="row">
                                    <div class="col">
                                        <h3>@loc.startTime.ToString("h:mm tt")</h3>
                                    </div>
                                    <div class="col">
                                        @if(US){
                                            <h5>@loc.temperature°F</h5>
                                            <h5>@loc.windSpeed&nbsp;@loc.windDirection</h5>
                                        }else{
                                            <h5>@loc.temperatureC°C</h5>
                                            <h5>@wU(loc.windSpeed)&nbsp;@loc.windDirection</h5>
                                        }
                                    </div>
                                    <div class="col">
                                        <p>@loc.shortForecast</p>
                                    </div>
                                    <div class="col">
                                        <div class="text-right">
                                            <figure>
                                                <img src=@loc.iconBase />
                                            </figure>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }else{
                    <div class="card bg-dark text-white">
                        <div class="card-header">
                            <div class="container">
                                <div class="row">
                                    <div class="col">
                                        <h4>@loc.startTime.ToString("h:mm tt")</h4>
                                    </div>
                                    <div class="col">
                                        @if(US){
                                            <h5>@loc.temperature°F</h5>
                                            <h5>@loc.windSpeed&nbsp;@loc.windDirection</h5>
                                        }else{
                                            <h5>@loc.temperatureC°C</h5>
                                            <h5>@wU(loc.windSpeed)&nbsp;@loc.windDirection</h5>
                                        }
                                    </div>
                                    <div class="col">
                                        <h5>@loc.shortForecast</h5>
                                    </div>
                                    <div class="col">
                                        <div class="text-right">
                                            <figure>
                                                <img src=@loc.iconBase />
                                            </figure>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        }
    }else if(!my_problem){
        <div class="parent container d-flex align-items-center justify-content-center h-75">
            <div class="child">
                <div class="alert alert-warning d-flex align-items-center" role="alert">
                    <div class="container">
                        <div class="row p-1">
                            <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Warning:"><use xlink:href="#exclamation-triangle-fill"/></svg>
                            <strong>&emsp;NWS Server ERROR:</strong>
                        </div>
                        <div class="row p-1">
                            <p>The requested location is not supported, inoperational, or does not exist.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }else{
        <div class="parent container d-flex align-items-center justify-content-center h-75">
            <div class="child">
                <div class="alert alert-danger d-flex align-items-center" role="alert">
                    <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Danger:"><use xlink:href="#exclamation-triangle-fill"/></svg>
                    <div>
                        <strong>&emsp;Whether Server Failure!</strong>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    public string wU(string ws){
        string tmp = ws.Substring(0, ws.IndexOf(" mph"));
        int sp;
        if((sp = tmp.IndexOf("to")) > 0){
            string first = tmp.Substring(0, sp);
            string second = tmp.Substring(sp+2);
            int one = Int32.Parse(first);
            int two = Int32.Parse(second);
            one = (int)Math.Round((((double)one)*1.609344), MidpointRounding.ToEven);
            two = (int)Math.Round((((double)two)*1.609344), MidpointRounding.ToEven);
            return one.ToString() + " to " + two.ToString() + " kph";
        }else{
            int k = Int32.Parse(tmp);
            k = (int)Math.Round((((double)k)*1.609344), MidpointRounding.ToEven);
            return k.ToString() + " kph";
        }
    }
    public class Locations{
        public string City { get; set; }
        public string State { get; set; }
        public float Latitude { get; set; }
        public float Longitude { get; set; }
    }
    private bool loading, my_problem = true;
    protected override async Task OnParametersSetAsync(){
        loading = true;
        await Post();
        loading = false;
    }
    private Container forecast_data = null;
    private string City;
    private string State;
    private bool US;
    private TimeSpan t => (DateTimeOffset.UtcNow - forecast_data.weather.updated);
    private int age => (int)Math.Round(t.TotalHours,0,MidpointRounding.AwayFromZero);
    private Models.UserResponse user = new Models.UserResponse();
    private async Task Post(){
        string tmp_City = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem",
            "City");
        string tmp_State = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem",
            "State");
        string tmp_Unit = null;
        string cookie = await JSRuntime.InvokeAsync<string>("blazorExtensions.AuthGet",
            "Authorization");
        if(cookie != null){
            int i = cookie.IndexOf(" ") + 1;
            if(i > 0){
                string token = cookie.Substring(i);
                var userRequest = new HttpRequestMessage(HttpMethod.Get, "user");
                userRequest.Headers.Authorization = new AuthenticationHeaderValue("Token", token);
                using var userResponse = await Http.SendAsync(userRequest);
                if(userResponse.IsSuccessStatusCode){
                    user = await userResponse.Content.ReadFromJsonAsync<Models.UserResponse>();
                    if(user.measurement == "SI")
                        tmp_Unit = "SI";
                    else
                        tmp_Unit = "US";
                }else
                    await JSRuntime.InvokeVoidAsync("blazorExtensions.AuthDelete", "Authorization");
            }
        }
        var locObj = new Locations(){
            City = (tmp_City == null) ? "San Francisco" : tmp_City,
            State = (tmp_State == null) ? "CA" : tmp_State,
            Latitude = 0.0F,
            Longitude = 0.0F
        };
        US = (tmp_Unit == "US" || tmp_Unit == null);
        City = locObj.City;
        State = locObj.State;
        var request = new HttpRequestMessage(HttpMethod.Post, "hourly");
        request.Content = new StringContent(JsonSerializer.Serialize(locObj),
            null, "application/json");
        using var response = await Http.SendAsync(request);
        if(response.IsSuccessStatusCode)
            forecast_data = await response.Content.ReadFromJsonAsync<Container>();
        else if(((Int32)response.StatusCode) == 502)
            my_problem = false;
    }
    public class Period{
        public int number { get; set; }
        public string name { get; set; }
        public DateTimeOffset startTime { get; set; }
        public DateTimeOffset endTime { get; set; }
        public bool isDaytime { get; set; }
        public int temperature { get; set;  }
        public int temperatureC => (int)Math.Round(
            ((double)((temperature - 32)*0.5556)),0,MidpointRounding.ToEven);
        public char temperatureUnit { get; set; }
        public string temperatureTrend { get; set; }
        public string windSpeed { get; set; }
        public string windDirection { get; set; }
        public string icon { get; set; }
        public string iconBase => (icon.IndexOf("?") > 0) ? icon.Substring(0,
            icon.IndexOf("?")) : icon;
        public string shortForecast { get; set; }
        public string detailedForecast { get; set; }
    }
    public class Elevation{
        public string unitCode { get; set; }
        public double value { get; set; }
        public float meters => (float)Math.Round(value,2,MidpointRounding.ToEven);
        public float feet => (float)Math.Round((value * 3.2808398950131),2,
            MidpointRounding.ToEven);
    }
    public class Metadata{
        public DateTimeOffset updated { get; set; }
        public string units { get; set; }
        public string forecastGenerator { get; set; }
        public DateTimeOffset generatedAt { get; set; }
        public DateTimeOffset updateTime { get; set; }
        public string validTimes { get; set; }
        public Elevation elevation { get; set; }
        public IEnumerable<Period> periods { get; set; }
        public string timeZone { get; set; }
        public string tz => timeZone.Replace('_', ' ');
    }
    public class Container{
        public Metadata weather { get; set; }
        public string city { get; set; }
        public string state { get; set; }
    }
}
