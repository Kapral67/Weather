@page "/register"

@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using System.Threading.Tasks
@using System.Linq
@using System.Text.Json

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavMan

@if(init){
    <div class="parent container d-flex align-items-center justify-content-center h-100">
        <div class="child">
            <span class="spinner-border spinner-border-lg mr-1"></span>
        </div>
    </div>
}else{
    <div class="card">
        <h4 class="card-header">Create Account</h4>
        <div class="card-body">
            <EditForm Model="@model" OnValidSubmit="@Create">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Email</label>
                    <InputText @bind-Value="@model.email" class="form-control" />
                    <ValidationMessage For="@(() => model.email)" />
                </div>
                <div class="form-group">
                    <label>Measurement System</label>
                    <select class="form-control" @bind="@model.measurement">
                        @foreach(var u in units){
                            <option value="@u"> @u </option>
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label>Home Page</label>
                    <select class="form-control" @bind="@model.defaultPage">
                        @foreach(var p in pages){
                            <option value="@p"> @p </option>
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText @bind-Value="@model.password" type="password" class="form-control" />
                    <ValidationMessage For="@(() => model.password)" />
                </div>
                <div class="form-group">
                    <label>Confirm Password</label>
                    <InputText @bind-Value="@model.c_password" type="password" class="form-control" />
                    <ValidationMessage For="@(() => model.c_password)" />
                </div>
                <button disabled="@loading" class="btn btn-primary">
                    @if(loading){
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Submit
                </button>
            </EditForm>
            @if(err != null){
                @foreach(var i in err){
                    @foreach(var y in @i.Value){
                        <div class="container">
                            <div class="row p-4">
                                <div class="alert alert-danger">
                                    <strong>Error!</strong> @y
                                </div>
                            </div>
                        </div>
                    }
                }
            }
        </div>
    </div>
}

@code {
    private Models.Register model = new Models.Register();
    List<string> units = new List<string>() { "Default", "SI", "US" };
    List<string> pages = new List<string>() { "Default", "Hourly", "Daily", "Account" };
    private bool loading, init;
    private Dictionary<string, List<string>> err = null;
    private async Task checkLoggedOut(){
        string cookie = await JSRuntime.InvokeAsync<string>("blazorExtensions.AuthGet", "Authorization");
        if(cookie != null){
            await JSRuntime.InvokeVoidAsync("blazorExtensions.AuthDelete", "Authorization");
            NavMan.NavigateTo("/login", true);
        }
    }
    protected override async Task OnParametersSetAsync(){
        init = true;
        await checkLoggedOut();
        init = false;
    }
    private async Task Create(){
        loading = true;
        var createRequest = new HttpRequestMessage(HttpMethod.Post, "register");
        if(model.measurement == null)
            model.measurement = "Default";
        if(model.defaultPage == null)
            model.defaultPage = "Default";
        createRequest.Content = new StringContent(JsonSerializer.Serialize(model), null, "application/json");
        using var createResponse = await Http.SendAsync(createRequest);
        if(createResponse.IsSuccessStatusCode){
            NavMan.NavigateTo("/login");
        }else
            err = await createResponse.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
        loading = false;
    }
}
